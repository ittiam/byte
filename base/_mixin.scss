@charset "UTF-8";

//-----------------------------------------------------
// mixin scss
// 包括常用的mixin, %, @function 及辅助的btn和背景图片icon
// mixin，通过@include调用，样式通过拷贝的方式使用，尤其适用于传递参数
// %，通过@extend调用，样式通过组合申明的方式使用，适用于不传参数的代码片段
// @function，返回一个值，用于调用
//-----------------------------------------------------

// mixin & %
// 既定义了mixin也定义了%，根据需求使用@include或@extend调用
//-----------------------------------------------------

// Center-align a block level element
@mixin center-block($extend: true) {
  @if $extend {
    @extend %center-block;
  }
  @else {
    margin-left: auto;
    margin-right: auto;
  }
}

%center-block {
  @include center-block(false);
}

// clearfix
@mixin clearfix($extend: true) {
  @if $extend {
    @extend %clearfix;
  }
  @else {
    &::before,
    &::after {
      content: "";
      display: table;
    }
    &::after {
      clear: both;
    }
  }
}

%clearfix {
  @include clearfix(false);
}

// Hide only visually, but have it available for screenreaders
// 只隐藏于视觉，屏幕浏览器可以阅读
@mixin hidden-clip($extend: true) {
  @if $extend {
    @extend %hidden-clip;
  }
  @else {
    position: absolute;
    clip: rect(1px, 1px, 1px, 1px);
  }
}

%hidden-clip {
  @include hidden-clip(false);
}

// ellipsis
@mixin ellipsis($extend: true) {
  @if $extend {
    @extend %ellipsis;
  }
  @else {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }
}

%ellipsis {
  @include ellipsis(false);
}

// ellipsis lines
// only old webkit flex box
@mixin ellipsis-lines($lines: 2) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
}

// word-break
@mixin word-break($extend: true) {
  @if $extend {
    @extend %word-break;
  }
  @else {
    white-space: normal;
    word-wrap: break-word;
    word-break: break-all;
  }
}

%word-break {
  @include word-break(false);
}

// disabled
// add !important
@mixin disabled($color-text: map-get($color-disabled, text), $color-bg: map-get($color-disabled, bg), $color-split: false) {
  background-color: $color-bg !important;
  color: $color-text !important;
  cursor: default !important;
  pointer-events: none !important;
  @if $color-split {
    border: 1px solid map-get($color-disabled, border);
  }
}

%disabled {
  @include disabled;
}

// image replace text
@mixin ir($extend: true) {
  @if $extend {
    @extend %ir;
  }
  @else {
    font: 0/0 a;
    text-shadow: none;
    border: 0 none;
    color: transparent;
  }
}

%ir {
  @include ir(false);
}

// fixed top or bottom or bottom & top
@mixin fixed($pos: 0) {
  position: fixed;
  left: 0;
  right: 0;
  @if $pos == bottom {
    bottom: 0;
  } @else if $pos == all {
    top: 0;
    bottom: 0;
  } @else {
    top: $pos;
  }
}

%fixed-top {
  @include fixed;
}

%fixed-bottom {
  @include fixed(bottom);
}

// justify
// 左右对齐
@mixin justify($extend: true) {
  @if $extend {
    @extend %justify;
  }
  @else {
    display: flex;
    justify-content: space-between;
  }
}

%justify {
  @include justify(false);
}

// border和transform实现
// 注意before和after的层级问题
@mixin hairline($direction: top, $color: $color-split) {
  position: absolute;
  left: 0;
  top: 0;

  @if $direction == top or $direction == bottom{
    right: 0;
    height: 0;
    transform: scaleY(0.5);
    border-top: 1px solid $color;
  }
  @if $direction == bottom {
    top: auto;
    bottom: 0;
  }
  @if $direction == right or $direction == left{
    width: 0;
    bottom: 0;
    transform: scaleX(0.5);
    border-left: 1px solid $color;
  }
  @if $direction == right {
    left: auto;
    right: 0;
  }
  @if $direction == all {
    width: 200%;
    height: 200%;
    transform-origin: left top;
    transform: scale(0.5);
    border: 1px solid $color;
  }
}

// border top & bottom
%border-tb {
  position: relative;

  &::before {
    content: "";
    @include hairline(top);
    z-index: 1;
  }

  &::after {
    content: "";
    @include hairline(bottom);
  }
}

// border all
%border-all {
  position: relative;

  &::before {
    content: "";
    @include hairline(all);
    z-index: -1;
  }
}

// mixin
// 只定义了mixin，所以只能通过@include来调用
//-----------------------------------------------------

// table 等
// $child 参数请使用单引号，因为用于子元素选择器
@mixin equal-table($child: 'li') {
  display: table;
  table-layout: fixed;
  width: 100%;

  #{unquote($child)} {
    display: table-cell;
  }
}

// flex 等分
// $child 参数请使用单引号，因为用于子元素选择器
@mixin equal-flex($child: 'li') {
  display: flex;

  #{unquote($child)} {
    flex: 1;
    width: 1%;
  }
}

// line equal gap
// $child 参数请使用单引号，因为用于子元素选择器
@mixin line-equal-gap($gap: 10px, $child: 'li', $lr: true) {
  display: flex;

  @if $lr {
    padding-left: $gap;
    padding-right: $gap;
  }

  #{unquote($child)} {
    flex: 1;
    width: 1%;

    &:not(:first-of-type){
      margin-left: $gap;
    }
  }
}

// line equal item
@mixin line-equal-item($lr: true) {
  display: flex;
  justify-content: space-between;

  @if $lr {
    &::before,
    &::after {
      content: "";
    }
  }
}

// flex center
@mixin center-flex($direction: both) {
  display: flex;
  @if $direction == both {
    justify-content: center;
    align-items: center;
  }
  @else if $direction == x {
    justify-content: center;
  }
  @else if $direction == y {
    align-items: center;
  }
}

// translate center
@mixin center-translate($direction: both) {
  position: absolute;
  @if $direction == both {
    top: 50%;
    left: 50%;
    transform: translate3d(-50%, -50%, 0);
  }
  @else if $direction == x {
    left: 50%;
    transform: translate3d(-50%, 0, 0);
  }
  @else if $direction == y {
    top: 50%;
    transform: translate3d(0, -50%, 0);
  }
}

// object wrap
// $child 参数请使用单引号，因为用于子元素选择器
@mixin object-wrap($percent: 100%, $child: 'img') {
  position: relative;
  padding-top: $percent;
  height: 0;

  #{unquote($child)} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

// triangle 三角箭头
// 可采用空元素或伪元素生成，具体定位这里不涉及
%triangle-basic {
  content: "";
  height: 0;
  width: 0;
  overflow: hidden;
}

@mixin triangle($direction: top, $border-width: 6px, $border-color: $color-split) {
  @extend %triangle-basic;
  @if $direction == top {
    border-bottom: $border-width solid $border-color;
    border-left: $border-width dashed transparent;
    border-right: $border-width dashed transparent;
  }
  @else if $direction == right {
    border-left: $border-width solid $border-color;
    border-top: $border-width dashed transparent;
    border-bottom: $border-width dashed transparent;
  }
  @else if $direction == bottom {
    border-top: $border-width solid $border-color;
    border-left: $border-width dashed transparent;
    border-right: $border-width dashed transparent;
  }
  @else if $direction == left {
    border-right: $border-width solid $border-color;
    border-top: $border-width dashed transparent;
    border-bottom: $border-width dashed transparent;
  }
}

// v arrow 方向箭头
@mixin v-arrow($direction: right, $border-width: 1px, $size: 9px, $color: #999) {
  display: inline-block;
  vertical-align: middle;
  width: $size;
  height: $size;

  @if $direction == top {
    border-top: $border-width solid $color;
    border-right: $border-width solid $color;
    transform: rotate(-45deg);
  }
  @else if $direction == right {
    border-top: $border-width solid $color;
    border-right: $border-width solid $color;
    transform: rotate(45deg);
  }
  @else if $direction == bottom {
    border-left: $border-width solid $color;
    border-bottom: $border-width solid $color;
    transform: rotate(-45deg);
  }
  @if $direction == left {
    border-left: $border-width solid $color;
    border-bottom: $border-width solid $color;
    transform: rotate(45deg);
  }
}

// selector
// 改变父元素状态，如:hover或.active
// 父元素不能有组合选择器，如.a, .b{}
// .parent{
//     .child{
//         @include parent-state(":hover"){
//             color: #f00;
//         }
//     }
// }
// .parent:hover .child {
//     color: #f00;
// }
@mixin parent-state($states...) {
  $parent: nth(nth(&, 1), (length(nth(&, 1))-1));

  @each $state in $states {
    @at-root #{selector-replace(&, $parent, str-insert($state, $parent, 0))} {
      @content;
    }
  }
}

/**
 * @description 定义是否有滚动条
 * @method overflow
 * @version 1.0.0
 * @param {String} $overflow 取值与最新原生语法一致，默认值：auto <1.0.0>
 */
@mixin overflow($overflow: auto) {
  @if $overflow == auto {
    overflow: auto;
    // 移除此条规则，防止iOS8.0+ webview崩溃
    -webkit-overflow-scrolling: touch;
  } @else {
    overflow: $overflow;
  }
}

@mixin overlay {
  background: transparent;
  opacity: 0;
  position: fixed;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  z-index: $z-mask;
}

//function
//-----------------------------------------------------

// 为颜色添加白色，以百分比形式
@function tint($color, $percent) {
  @return mix(white, $color, $percent);
}

// 为颜色添加黑色，以百分比形式
@function shade($color, $percent) {
  @return mix(black, $color, $percent);
}
